#!/bin/bash
# clear

##
#
#	Softman 1.0.8 (October 2021)
#
#	Copyright Lee Hodson @VR51
#
#	See function 'softman' for options or type './softman -h' or if installed 'man softman'
#
#	function list: run, softman, launch, message, about. See Options for feature list.
#
#	Program boots at the bottom with run "$@"
#
#
#	Run options:
#
#		Installed .deb version
#
#			1) Type softman into the application Launcher
#			2) Type softman into the command line
#			3) Type softman <option> into the command line
#			4) Use 'man softman' to view help file
#
#		Uninstalled version
#
#			sudo ./softman or sudo bash ./softman
#			click 'softman'
#			load into script as a source file
#
#	Options:
#
#		upgrade, list, add, remove, purge, find, install, reinstall, uninstall, package, build, flush, fix, fixlanf, findbad, fixbad, fixmissing, rebuildsystem
#
#			upgrade # Upgrades the system software.
#
#		Repository Tools
#
#			list # list all installed repositories.
#			add <PPA> <PPA> <PPA> # Add a repository. Typically PPA repository.
#			remove <PPA> <PPA> <PPA> # Remove a repository. Typically PPA repository.
#			purge <PPA> <PPA> <PPA> # Purge a repository. Typically PPA repository. This removes software installed from the repository, installs the distro version when available.
#
#		Software Tools
#
#			find <package> <package> <package>... # to find package information
#			install <package> <package> <package>... # to install a package or list of packages with recommended dependencies. Wildcards allowed.
#			reinstall <package> <package> <package>... # to reinstall a package or list of packages with recommended dependencies. Wildcards allowed.
#			uninstall <package> <package> <package>.. # to uninstall a package or list of packages.
#			package: to create a .deb installer. Creates template ready for files to be placed into it.
#			build # Builds software provided as source.
#			flush # Cleans the apt cache.
#
#		System Repair Tools
#
#			fix # to attempt to fix packages with broken dependencies and/or repair a slightly broken system.
#			fixlang # to install missing language packages.
#			findbad # Attempts to find software with corrupt files
#			fixbad # Attempts to fix software with corrupt files
#			fixmissing # Attempts to fix software that is broken because of missing files
#			rebuildsystem # Attempts to fully re-install / rebuild all software currently installed in the system.
#
#
#		Run with -u to update software repositories (equivalent to apt update)
#
#	Help = ./softman -h
#
##

##
#
#	To-do
#
#		Add option to download and install a package from URL
#
#		Add wrappers for configure, c/make & make install
#
#		Rewrite 'package' option to make more concise.
#			Add a prompt function
#			Add a directory/file generation function.
#
##

#
#	Cycle with $options or $_options then $__options (no suggests) : this resolves big downloads
# Adapt to allow both array and none array variable inputs
#

version='SoftMan 1.0.5'

# Locate Where We Are
filepath="$(pwd)"
# A Little precaution
cd "$filepath"

bold=$(tput bold)
normal=$(tput sgr0)

today=$( date '+%F' )

## Receive script arguments and process them -- See 'run' at bottom of script

function softman_run() {
	## Process args
	
	while getopts ":uhv" opts ; do
		case $opts in
		
		u)
		
			apt update
			shift
		;;
		
		h)
		
			softman_about
			exit
		
		;;
		
		v)
		
			echo "$version"
			exit
		
		;;
		
		*)
		
			return 1
		
		;;
		
		esac
		
	done

	## Send to softman
	if test $# == 0; then # no args = run softman upgrade
	
		tty -s
		if test "$?" -ne 0 ; then
			softman_launch softman
		else
			sudo -v
			softman launch
		fi
		
	elif test $# == 1; then
	
		arg="$1"
		shift	
		softman "$arg"
		
	else
	
		arg="$1"
		shift
		declare -a args

		for i in "$@"
		do
			args+=( "$1" )
			shift
		done
		
		softman "$arg" "${args[*]}"
		
	fi
}

## Run softman

function softman() {

	##
	#
	#	Softman 1.0.8
	#
	#	Install or reinstall packages with build dependencies.
	#	Update system
	#	Build binaries from source
	#
	#	Written to solve a Linux World problem
	#
	#	softman arg args
	#
	#	@1 = upgrade, list, add, remove, purge, find, install, reinstall, build, flush, fix, fixlang, findbad, fixbad, rebuildsystem:
	#				are we to list all installed repositories;
	#				are we to add a repository;
	#				are we to remove a repository;
	#				are we to purge a repository and remove software installed by it or replace the software by distro provided software;
	#				are we to find packages;
	#				are we to install, reinstall, build or upgrade packages;
	#				are we to re-install every package with rebuildsystem?
	#				are we to compile a .deb from source;
	#				are we to fix a broken package;
	#				are we to fix missing language packages;
	#				are we to clean the cache;
	#				are we to find or fix installed packages that are corrupted;
	#				are we to find and reinstall packages with missing files;
	#	@2 = list of packages to (re)install: space separated list of packages.
	# 
	#	Copyright Lee Hodson @ VR51 & JournalXtra
	#
	#
	#	EXAMPLE USAGE
	#
	# softman install 'simplescreenrecorder gimp vlc'
	# softman reinstall 'simplescreenrecorder gimp vlc'
	#
	##

	options='--install-suggests --show-progress'
	_options='--install-suggests'

	case $1 in
	
	launch)
		sudo apt update
		sudo apt $options upgrade
		sudo apt $options dist-upgrade
		sudo apt $options full-upgrade
		sudo apt clean
		sudo apt autoremove
		softman_message 'upgrade'
		read something
	;;
	
	upgrade)
		apt $options upgrade
		apt $options dist-upgrade
		apt $options full-upgrade
		
	;;

	list)
		apt-cache policy | grep http | awk '{print $2 $3}' | sort -u | less
	;;

	add)
		for i in ${2}; do
			add-apt-repository "$i"
		done
		
		apt update
	;;

	remove)
		for i in ${2}; do
			add-apt-repository --remove "$i"
		done

		apt update
	;;

	purge)
		if command -v ppa-purge > /dev/null 2>&1; then
			for i in ${2}; do
				ppa-purge "$i"
			done
		else
			softman install ppa-purge
			softman purge ${2}
		fi

		apt update
	;;

	find)
		for i in ${2}; do
			items+=$( apt-cache search "$i" )
		done

		IFS=$'\n' sorted=($(sort <<<"${items[*]}"))
		unset IFS
		printf "%s\n" "${sorted[@]}" | less
	;;

	install)
		for i in ${2}; do
				apt $_options build-dep "$i"
				apt $options install "$i"
		done
	;;

	reinstall)
		for i in ${2}; do
				apt $_options build-dep "$i"
				apt install $options --reinstall "$i"
		done
	;;
	
	uninstall)
		for i in ${2}; do
				apt remove "$i"
		done
	;;

	build)
		for i in ${2}; do
			apt $options --compile source "$i"
		done
	;;
	
	package)
	
		name='' # Package name
		version='' # Program version number
		number='' # Man type number
		
		clear
		printf "\nWe are about to create a basic .deb package template directory. You must manually put script & program files into the template directory after it is created.\n"
		printf "\nGuidance will be provided at each step. After the template is created and files have been placed into the template we will build the .deb package.\n"

		printf $bold
		printf "\nStage 1: The Program's Details\n"
		printf $normal
		
		while : ;	do
			printf "\nEnter the name of the program:\n"
			read name
			
			case $name in
			
				[[:graph:][:blank:]]*)
					name=$(printf "$name" | sed "s/\s/-/g")
					break
				;;
				
				*)
					printf "Use letters, digits and spaces only"
					
			esac
		done

		while : ; do
		
			printf "\nEnter the version number of the program:\n"
			read version
			
			case $version in
			
				[[:graph:][:blank:]]*)
					version=$(printf "$version" | sed "s/\s/-/g")
					break
				;;
				
				*)
					printf "Use letters, digits and spaces only"
					
			esac
		
		done

		while : ; do
		
			printf "\nEnter the man page number type:\n\n"
			
			type=( 'User Commands' 'System Calls' 'C Library Functions' 'Devices and Special Files' 'File Formats and Conventions' 'Games et. al.' 'Miscellanea' 'System Administration tools and Daemons' )
			
			n=1
			for i in "${type[@]}"; do
				printf "$n: $i\n"
				let n=n+1
			done
			
			read number
			
			case $number in
			
				[[:digit:]])
					break
				;;
				
				*)
					printf "Use digits 0-9 only"
					
			esac
		
		done
		
		while : ;	do
			printf "\nEnter the program maintainer's name:\n"
			read maintainer
			
			case $maintainer in
			
				[[:graph:][:blank:]]*)
					break
				;;
				
				*)
					printf "Use letters, digits and spaces only"
					
			esac
		done
		
		while : ;	do
			printf "\nEnter a brief description of the program:\n"
			read description
			
			case $description in
			
				[[:graph:][:blank:]]*)
					break
				;;
				
				*)
					printf "Use letters, digits and spaces only"
					
			esac
		done

		while : ;	do
			printf "\nEnter homepage web address of the program or its maintainer:\n"
			read homepage
			
			case $homepage in
			
				[[:graph:][:blank:]]*)
					break
				;;
				
				*)
					printf "Use letters, digits and spaces only"
					
			esac
		done
		clear
		
		# Make directories
		
		printf $bold
		printf "\nStage 2: Directory and File Creation\n"
		printf $normal

		path=( "$name-$version/" "$name-$version/DEBIAN" "$name-$version/usr" "$name-$version/usr/bin" "$name-$version/usr/share" "$name-$version/usr/share/applications" "$name-$version/usr/share/icons" "$name-$version/usr/share/icons/$name" "$name-$version/usr/share/man" "$name-$version/usr/share/man/man$number" )

		for i in "${path[@]}"; do
			if test ! -d "$filepath/$i"; then
				mkdir "$filepath/$i"
			fi
		done

		# Make essential files
		
		files=( "$name-$version/DEBIAN/control" "$name-$version/usr/share/applications/$name.desktop" "$name-$version/usr/share/man/man$number/$name.$number" )

		for i in "${files[@]}"; do
			if test ! -f "$filepath/$i"; then
				touch "$filepath/$i"
			fi
		done

		# Build control file
		control=( "Package: $name" "Version: $version" "Maintainer: $maintainer" "Architecture: all" "Description: $description" "Homepage: $homepage" )
		for i in "${control[@]}"; do
				printf "$i\n" >> "$filepath/$name-$version/DEBIAN/control"
		done
		
		# Build desktop file
		desktop=( "[Desktop Entry]" "Type=Application" "Categories=Utilities;Utility" "Name=$name" "Exec=/usr/bin/$name" "Icon=/usr/share/icons/$name/$name" "Terminal=true" )
		for i in "${desktop[@]}"; do
				printf "$i\n" >> "$filepath/$name-$version/usr/share/applications/$name.desktop"
		done
		
		# Build example man file
		manual=( ".TH [$name] [$number] [$today] [$version] [$name]" ".SH NAME" ".B $name" ".SH SYNOPSIS" ".PP" "$description" ".SH DESCRIPTION" ".PP" "$description" ".SH OPTIONS" ".PP" "Example text." ".SS SUB SECTION" ".PP" "More example text." ".SH EXAMPLES" ".PP" ".SH BUGS" ".PP" ".SH AUTHOR" ".PP" ".SH SEE ALSO" ".PP" )
		for i in "${manual[@]}"; do
				printf "$i\n" >> "$filepath/$name-$version/usr/share/man/man$number/$name.$number"
		done
		
		printf "\nThe template has been created at $filepath/$bold$name-$version$normal\n"
		printf "\nYou must edit each of the following files manually before the .deb installation file is created.\n"
		
		printf $bold
		printf "\nFile 1: The Control File\n"
		printf $normal
		printf "\nThe control file contains information about the program. This information is shown during program installation.\n"
		printf "\nA control file has been created in $filepath/$name-$version/DEBIAN/control\n"
		printf "\nPress any key when ready to move onto the next file.\n"
		read something
		clear
		
		printf $bold
		printf "\nFile 2: The Desktop Application File\n"
		printf $normal
		printf "\nThe desktop application file tells the operating system where to place the program link in the applications launcher menu.\n"
		printf "\nA desktop application file has been created in $filepath/$name-$version/usr/share/applications/$name.desktop.\n"
		printf "\nPress any key when ready to move onto the next file.\n"
		read something
		clear
		
		printf $bold
		printf "\nFile 3: The Application Icon\n"
		printf $normal
		printf "\nAn icon will help identify the program. Put an SVG icon in $filepath/$name-$version/usr/share/icons/$name.\n"
		printf "\nThe icon should be named $name.svg\n"
		printf "\nIcons can be downloaded from iconfinder.com or similar websites, or you can make one.\n"
		printf "\nPress any key when ready to move onto the next file.\n"
		read something
		clear

		printf $bold
		printf "\nFile 4: The Man File\n"
		printf $normal
		printf "\nThe man file is the help file for your program.\n"
		printf "\nAn example man file has been placed into $name-$version/usr/share/man/man$number.\n"
		printf "\nPress any key when ready to move onto the next file.\n"
		read something
		clear

		printf $bold
		printf "\nFile 5: The Program File(s)\n"
		printf $normal
		printf "\nThe template directory has a very specific structure that must be adhered to. The template is a representation of the operating system's root file structure.\n"
		printf "\nFiles in the template directory must be placed into template directories as they would be were they placed directly into the root file system.\n"
		printf "\nFor example, if you place your program file into the template directory $filepath/$name-$version$bold/usr/bin$normal then the .deb installer would install the application file into $bold/usr/bin$normal\n"
		printf "\n\n"
		printf "\nThe $bold/usr/bin$normal directory is where user scripts are normally installed. If you place your application file to somewhere else you must configure the desktop application file accordingly.\n"
		printf "\nPress any key when ready to continue.\n"
		read something
		clear
		
		printf $bold
		printf "\nBefore you press another key you must make sure you have edited the Control File, the Desktop Application File, and the Man file, that you have placed the icon file and that the application file(s) have been put into their correct place within the template directory.\n"
		printf "\nPress the Enter key when ready to build the .deb file\n"
		printf $normal
		
		read something
		
		while : ; do
			case $something in
				'')
					printf "Final Check: Press any key to build $name.deb"
					read something
					break
				;;
				*)

			esac
		done
		
		# Compress man file if exists
		if test -f "$filepath/$name-$version/usr/share/man/man$number/$name.$number"; then
			gzip "$filepath/$name-$version/usr/share/man/man$number/$name.$number"
		fi
		
		
		# Build .deb file
		dpkg-deb -b $filepath/$name-$version
		
	;;
	
	flush)
		apt clean
		apt autoremove
	;;

	fix)
		sudo apt install -f
		sudo dpkg --configure -a
	;;
	
	fixlang)
		sudo apt install -f $(check-language-support)
	;;
	
	findbad)
		if command -v debsums > /dev/null 2>&1; then
				apt clean
				debsums_init ; debsums -cs
				# debsums -es
		else
				softman install debsums
				softman findbad
		fi
	;;

	fixbad)
		if command -v debsums > /dev/null 2>&1; then
				apt clean
				apt install $options --reinstall $(dpkg -S $(debsums -c) | cut -d : -f 1 | sort -u)
		else
				softman install debsums
				softman fixbad
				# debsums -es
		fi
	;;

	fixmissing)
		if command -v debsums > /dev/null 2>&1; then
				apt clean
				debsums -c 2>&1 | cut -d " " -f 4 | sort -u | xargs -rd '\n' -- dpkg -S | cut -d : -f 1 | sort -u | xargs -rd '\n' -- apt install $options --reinstall
		else
				softman install debsums
				softman fixmissing
		fi
	;;
	
	rebuildsystem)
			dpkg -l | grep '^ii ' | sed 's/  */\t/g' |cut -f 2,3 | sed 's/\t/=/' | xargs apt install --reinstall -y --ignore-missing
			
			# See: http://unix.stackexchange.com/questions/79028/debian-install-missing-man-pages
	;;

	*)

		return 2

	;;

	esac
	
	softman_message "$arg"

}

## Message

function softman_message() {
	printf "\n\nsoftman service completed: $arg\n"
}

function softman_about() {

bold=$(tput bold)
normal=$(tput sgr0)

cat <<HELP

${bold}SOFTMAN${normal}

SoftMan (Software Manager) is mostly a wrapper around frequently used apt command sequences, plus a few repair tools. Beside the repair tools, the main difference between softman and apt is that softman always grabs build dependencies before it installs requested packages.

${bold}USAGE${normal}

	Use ${bold}sudo softman OPTION${normal} to manage software without first updating the package list.
	Use as ${bold}sudo softman -u OPTION${normal} to manage software with package list update first.

${bold}FLAGS${normal}

	${bold}-u${normal} is equivalent to sudo apt update

${bold}OPTIONS${normal}

${bold}BASIC TOOL${normal}

	${bold}upgrade${normal}: update/upgrade the system software with suggested build dependent packages.
	
${bold}REPOSITORY TOOLS${normal}

	${bold}list${normal}: List all installed repositories.
	${bold}add${normal}: Add a PPA repository. Separate with a space multiple repositories listed together.
	${bold}remove${normal}: Remove a PPA repository. Separate with a space multiple repositories listed together.
	${bold}purge${normal}: Purge a repository. Typically PPA repository. This removes software installed from the repository, installs the distro version when available.
	
${bold}SOFTWARE TOOLS${normal}
	
	${bold}find${normal}: locate a package or list of packages available for installation. Wildcards allowed.
	${bold}install${normal}: install software with suggested build dependent packages. Wildcards allowed.
	${bold}reinstall${normal}: reinstall software with suggested build dependent packages. Wildcards allowed.
	${bold}uninstall${normal}: uninstall software. Wildcards allowed.
	${bold}package${normal}: create .deb package. This builds the template structure for a .deb package along with control file, application file and man file. You must manually place files into the template.
	${bold}build${normal}: download package source files and compile into a .deb binary file ready for installation
	${bold}flush${normal}: clear the download cache and automatically remove packages that are no longer required.
	
${bold}SYSTEM REPAIR TOOLS${normal}

	${bold}fix${normal}: fix broken packages and configure partially installed software.
	${bold}fixlang${normal}: fix missing language packages.
	${bold}findbad${normal}: find packages with corrupt files / find packages with missing files.
	${bold}fixbad${normal}: find curupt software and automatically reinstall their packages. Use with caution.
	${bold}fixmissing${normal}: find software with missing files and automatically reinstall their packages. Use with caution.
	${bold}rebuildsystem${normal}: reinstall all installed software. Use with extreme caution.

${bold}EXAMPLES${normal}

	${bold}softman -u${normal} will only download the list of available packages.
	${bold}softman -u install gimp${normal} will download the up-to-date list of packages available to the system then install gimp
	${bold}softman -u install gimp kate amarok${normal} will download the up-to-date list of packages available to the system then reinstall gimp, kate and amorok.
	
	${bold}Within a script, do:${normal}
	
	${bold}source \$path/softman -u'${normal}
	${bold}source \$path/softman -u reinstall krita'${normal}

${bold}VERSION${normal}
	
	$version
	
${bold}AUTHOR${normal}

	${bold}Lee Hodson${normal} as found at https://journalxtra.com/
	${bold}Information${normal} https://journalxtra.com/linux/free-linux-software-update-script/
	
HELP


}

## launch terminal

function softman_launch() {
		# This code section is released in public domain by Han Boetes <han@mijncomputer.nl>
		# Updated by Dave Davenport <qball@gmpclient.org>
		# Updated by Lee Hodson <https://journalxtra.com> - Added break on successful hit, added more terminals, humanized the failure message, replaced call to rofi with printf and made $terminal an array for easy reuse.
		#
		# This script tries to exec a terminal emulator by trying some known terminal
		# emulators.
		#
		# We welcome patches that add distribution-specific mechanisms to find the
		# preferred terminal emulator. On Debian, there is the x-terminal-emulator
		# symlink for example.

		terminal=( x-terminal-emulator xdg-terminal konsole gnome-terminal terminator urxvt rxvt Eterm aterm roxterm xfce4-terminal termite lxterminal xterm )
		for i in ${terminal[@]}; do
			if command -v $i > /dev/null 2>&1; then
				exec $i -e "$0"
				# break
			else
				printf "\nUnable to automatically determine the correct terminal program to run e.g Console or Konsole. Please run this program from a terminal AKA the command line.\n"
				read something
				exit 1
			fi
		done
}

## Boot

softman_run "$@"
